AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:

  RDSLambdaManageConnectionsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -  
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "AccessDDB"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "dynamodb:*"
                Resource: [!GetAtt ConnectionsCounter.Arn]
        - 
          PolicyName: "AllowMetricAdd"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "cloudwatch:PutMetricData"
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        

  RDSLambdaTestRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -  
            Effect: "Allow"
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "AllowInvoke"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource: !GetAtt LambdaRDSManageConnections.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        

  ConnectionsCounter:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput: 
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      AttributeDefinitions: 
        - 
          AttributeName: "RDBMSName"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "RDBMSName"
          KeyType: "HASH"       



  LambdaRDSManageConnections:
    Type: AWS::Serverless::Function
    Properties:
      Handler: LambdaRDS_ManageConnections.lambda_handler
      Description: "Lambda function manage RDS connections count"
      Runtime: python2.7
      #FunctionName: LambdaRDS_ManageConnections
      Role: !GetAtt RDSLambdaManageConnectionsRole.Arn
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables: 
          DDB_TABLE_NAME: !Ref ConnectionsCounter

  LambdaRDSTest:
    Type: AWS::Serverless::Function
    Properties:
      Handler: LambdaRDS_Test.lambda_handler
      Description: "Test Lambda function to access a RDS Database and read sample data"
      Runtime: python2.7
      #FunctionName: LambdaRDS_Test
      Role: !GetAtt RDSLambdaTestRole.Arn
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables: 
          RDS_HOST: !GetAtt RDSMySQL.Endpoint.Address
          RDS_USERNAME: DemoUser
          RDS_PASSWORD: Tester123
          RDS_DB_NAME: TestDB
          HELPER_FUNCTION_ARN: !GetAtt LambdaRDSManageConnections.Arn
  
  LambdaRDSCFNInit:
    Type: AWS::Serverless::Function
    Properties:
      Handler: LambdaRDS_CFNInit.lambda_handler
      Description: "Lambda function which will execute when this CFN template is created, updated or deleted"
      Runtime: python2.7
      #FunctionName: LambdaRDS_CFNInit
      Role: !GetAtt RDSLambdaManageConnectionsRole.Arn
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables: 
          RDS_HOST: !GetAtt RDSMySQL.Endpoint.Address
          RDS_USERNAME: DemoUser
          RDS_PASSWORD: Tester123
          RDS_DB_NAME: TestDB
          DDB_TABLE_NAME: !Ref ConnectionsCounter

  # Wire up the lambda function LambdaRDSCFNInit to execute on stack create, update or delete
  LambdaRDSCFnTrigger:
    Type: Custom::LambdaRDS
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt [ LambdaRDSCFNInit, Arn ]


  RDSMySQL:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 5
      DBInstanceClass: db.m4.xlarge
      DBName: TestDB
      Engine: mysql      
      MasterUsername: DemoUser
      MasterUserPassword: Tester123
      MultiAZ: False
      PubliclyAccessible: True      
      StorageType: gp2
    DeletionPolicy: Delete

Outputs:
  RDSMySQLEndPoint:
    Description: The  endpoint of the RDS MySQL instance
    Value: !GetAtt RDSMySQL.Endpoint.Address

    